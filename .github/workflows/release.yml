name: CI/CD

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-path: ${{ steps.set-build-path.outputs.build-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore FilterBuilder.sln

      - name: Build
        run: dotnet build FilterBuilder.sln --no-restore --configuration Release

      - name: Set build path
        id: set-build-path
        run: echo "build-path=$(pwd)" >> $GITHUB_OUTPUT

      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            **/bin/Release/
            **/obj/

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run unit tests and collect coverage
        run: |
          mkdir -p coverage-results
          dotnet test --configuration Release --collect:"XPlat Code Coverage" --settings coverlet.runsettings.xml --results-directory ./coverage-results --filter "FullyQualifiedName!~Q.FilterBuilder.IntegrationTests.Tests"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Merge coverage reports
        run: |
          reportgenerator -reports:coverage-results/**/coverage.cobertura.xml -targetdir:coverage-merged -reporttypes:"Cobertura"

      - name: Extract coverage percentage
        id: extract_coverage
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils jq bc
          coverage_percentage=$(xmllint --xpath 'string(//coverage/@line-rate)' coverage-merged/Cobertura.xml)
          coverage_percentage=$(echo "$coverage_percentage * 100" | bc -l | xargs printf "%.2f")
          label="Code Coverage"
          color="brightgreen"
          coverage_json=$(jq -nc --arg schemaVersion "1" --arg label "$label" --arg message "${coverage_percentage}%" --arg color "$color" '{schemaVersion: ($schemaVersion|tonumber), label: $label, message: $message, color: $color}')
          echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT
          echo "coverage_json=$coverage_json" >> $GITHUB_OUTPUT
          echo "Coverage JSON: $coverage_json"

      - name: Post coverage badge to GitHub Gist
        if: steps.extract_coverage.outputs.coverage_json != ''
        run: |
            echo "Posting coverage badge to GitHub Gist..."
            coverage_json_string=$(echo '${{ steps.extract_coverage.outputs.coverage_json }}' | jq -c .)
            payload=$(jq -nc --arg content "$coverage_json_string" '{"files": {"filter-builder-code-coverage.json": {"content": $content}}}')
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GIST_AUTH_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "User-Agent: github-actions" \
              -d "$payload" \
              "https://api.github.com/gists/0ad369a5370256450204a3f97397cb22"

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        provider: [SqlServer, MySql, PostgreSql]
    env:
      DatabaseProvider: ${{ matrix.provider }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run integration tests for ${{ matrix.provider }}
        run: dotnet test test/Q.FilterBuilder.IntegrationTests/Q.FilterBuilder.IntegrationTests.csproj --no-build --configuration Release --logger trx

  pack-and-publish:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install git-cliff
        uses: kenji-miyake/setup-git-cliff@v2

      - name: Restore dependencies
        run: dotnet restore FilterBuilder.sln

      - name: Build
        run: dotnet build FilterBuilder.sln --no-restore --configuration Release

      - name: Install MinVer for versioning
        run: dotnet tool install --global minver-cli

      - name: Pack NuGet packages (auto-versioned)
        run: |
          for proj in src/*/*.csproj; do
            dotnet pack "$proj" --configuration Release --output ./local-nuget
          done

      - name: Upload NuGet packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./local-nuget/*.nupkg

      - name: Publish to NuGet (only on release branch)
        if: github.ref == 'refs/heads/release'
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          for pkg in ./local-nuget/*.nupkg; do
            dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          done

      - name: Generate changelog (only on release branch)
        if: github.ref == 'refs/heads/release'
        run: |
          git-cliff -o CHANGELOG.md

      - name: Commit and push changelog (only on release branch)
        if: github.ref == 'refs/heads/release'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md
          git commit -m "chore(release): update changelog [skip ci]" || echo "No changes to commit"
          git push origin release 