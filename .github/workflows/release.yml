name: CI/CD

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-path: ${{ steps.set-build-path.outputs.build-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore FilterBuilder.sln

      - name: Build
        run: dotnet build FilterBuilder.sln --no-restore --configuration Release

      - name: Set build path
        id: set-build-path
        run: echo "build-path=$(pwd)" >> $GITHUB_OUTPUT

      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            **/bin/Release/
            **/obj/

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run unit tests and collect coverage
        run: |
          mkdir -p coverage-results
          for proj in test/*/*.csproj; do
            if [[ "$proj" != *IntegrationTests* ]]; then
              projname=$(basename "$proj" .csproj)
              dotnet test "$proj" --no-build --configuration Release --settings coverlet.runsettings /p:CollectCoverage=true /p:CoverletOutput=./coverage-results/${projname}-coverage.opencover.xml /p:CoverletOutputFormat=opencover
            fi
          done

      - name: List files after tests
        run: |
          echo "Workspace directory structure:"
          ls -lR

      - name: Find coverage report
        id: find_coverage
        run: |
          file=$(find ./coverage-results -type f -name '*-coverage.opencover.xml' | head -n 1)
          if [ -z "$file" ]; then
            echo "No coverage file found!"
            exit 1
          fi
          echo "COVERAGE_FILE=$file" >> $GITHUB_ENV

      - name: Print coverage file path
        run: echo "Coverage file $COVERAGE_FILE"

      - name: Create Test Coverage Badge
        uses: simon-k/dotnet-code-coverage-badge@v1.0.0
        id: create_coverage_badge
        with:
          label: Code Coverage
          color: brightgreen
          path: ${{ env.COVERAGE_FILE }}
          gist-filename: c3e6e0a3f443af2ef8f25342c9c1033ee668dbe2/filter-builder-code-coverage.json
          gist-id: 0ad369a5370256450204a3f97397cb22
          gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}

      - name: Print code coverage
        run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"

      # Note: Integration tests are not included in code coverage calculation for the badge.

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        provider: [SqlServer, MySql, PostgreSql]
    env:
      DatabaseProvider: ${{ matrix.provider }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run integration tests for ${{ matrix.provider }}
        run: dotnet test test/Q.FilterBuilder.IntegrationTests/Q.FilterBuilder.IntegrationTests.csproj --no-build --configuration Release --logger trx

  pack-and-publish:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install git-cliff
        uses: kenji-miyake/setup-git-cliff@v2

      - name: Restore dependencies
        run: dotnet restore FilterBuilder.sln

      - name: Build
        run: dotnet build FilterBuilder.sln --no-restore --configuration Release

      - name: Install MinVer for versioning
        run: dotnet tool install --global minver-cli

      - name: Pack NuGet packages (auto-versioned)
        run: |
          for proj in src/*/*.csproj; do
            dotnet pack "$proj" --configuration Release --output ./local-nuget
          done

      - name: Upload NuGet packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./local-nuget/*.nupkg

      - name: Publish to NuGet (only on release branch)
        if: github.ref == 'refs/heads/release'
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          for pkg in ./local-nuget/*.nupkg; do
            dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          done

      - name: Generate changelog (only on release branch)
        if: github.ref == 'refs/heads/release'
        run: |
          git-cliff -o CHANGELOG.md

      - name: Commit and push changelog (only on release branch)
        if: github.ref == 'refs/heads/release'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md
          git commit -m "chore(release): update changelog [skip ci]" || echo "No changes to commit"
          git push origin release